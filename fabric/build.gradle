plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    mavenCentral()
    maven {
        name = "dblsaiko"
        url = "https://maven.dblsaiko.net/"
    }
    maven {
        name = "vram"
        url = "https://maven.vram.io/"
    }
    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.floader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fapi_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.archapi_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${rootProject.flk_version}+kotlin.${rootProject.kotlin_version}"
    modImplementation("io.github.remod-studios:remod-core-fabric:${rootProject.remodcore_version}") {
        exclude(group: "me.shedaniel")
    }
    // platform-specific dependencies
    include(modImplementation('com.github.Chocohead:Fabric-ASM:v2.3'))
    include(modApi("grondag:frex-${project.mc_tag}:${project.frex_version}.+") { transitive = false })
    include(modImplementation("io.vram:jmx-fabric-${project.mc_tag}:${project.jmx_version}.+") { transitive = false })


    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}